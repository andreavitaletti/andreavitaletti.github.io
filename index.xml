<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Andrea Vitaletti</title>
    <link>https://andreavitaletti.github.io/</link>
    <description>Recent content on Andrea Vitaletti</description>
    <generator>Hugo -- gohugo.io</generator>
    
	<atom:link href="https://andreavitaletti.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Application-Server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Application-Server/</guid>
      <description>In the section on HTTP, we have mainly seen how to access static resources, but we have also had a look to dynamic pages generated in PHP.
In this section we will go further on the generation of dynamic content by anApplication Server (AS). While a Web server is designed to manage static resources (e.g. Web pages), the AS allow us to generate Web pages on the fly according to a specific business logic.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Authentication-and-Authorization/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Authentication-and-Authorization/</guid>
      <description>In many cases, resources can be accessed only to authenticated users. This is exactly the purpose of oAuth, an open protocol to allow secure authorization in a simple and standard method from web, mobile and desktop applications.
OAuth 2 is an authorization framework that enables applications to obtain limited access to user accounts on an HTTP service, such as Facebook, GitHub, and DigitalOcean.
Passport is authentication middleware for Node.js. It allows to easily implement oAuth for a number of providers, such as google, twitter and facebook, and also provides a simple mechanism for local authentication.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Beyond-Client-Server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Beyond-Client-Server/</guid>
      <description>A good introduction to P2P is provided by the following two documents:
 Mirco Tribastone I sistemi peer-to-peer Eng Keong Lua, J. Crowcroft, M. Pias, R. Sharma, S. Lim. A survey and comparison of peer-to-peer overlay network schemes IEEE Communications Surveys &amp;amp; Tutorials ( Volume: 7, Issue: 2, Second Quarter 2005 )  There is no consensus on the evolution of the Web. For sure, the amount of content generated by users and IoT devices will grow.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/IoT/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/IoT/</guid>
      <description>The following picture from here well depicts the IoT
There number of possible IoT applications is constantly growing and now covers a number of applications domains.
The real value of the IoT comes from the connectivity
that allows things to deliver and share their sensed data to distill intelligence
But why now
A reference model for the IoT is shown in the following picture
The value is on the data</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Messaging/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Messaging/</guid>
      <description>All the technologies we have discussed so far are based on the client server mechanism. Client Server is inherently synchronous: the client makes a requests and waits for the response by the server. In some case, this is not possible, because the client could not know in advance when to make a request. As an example, if you want to develop a solution in which a client want to know when a door is open, the client cannot know in advance when to place the request.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Microservices/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Microservices/</guid>
      <description>https://dzone.com/articles/patterns-for-microservices-sync-vs-async</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/PaaS/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/PaaS/</guid>
      <description>paas</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/REST/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/REST/</guid>
      <description>Now that we know how to generate content dynamically we have to take fully advantage of the dynamic content generated by third-parties.
A mashup, is a web application, that uses content from more than one source to create a single new service displayed in a single graphical interface.
Representational state transfer (REST) or RESTful web services are a way of providing interoperability between computer systems on the Internet. REST-compliant Web services allow requesting systems to access and manipulate textual representations of Web resources using a uniform and predefined set of stateless operations.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Socket-and-HTTP/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Socket-and-HTTP/</guid>
      <description>All you need to know on sockets and communication can be found in the Java Tutorial on What Is a Socket?
In a sentence:
 A socket is one endpoint of a two-way communication link between two programs running on the network. A socket is bound to a port number so that the TCP layer can identify the application that data is destined to be sent to. An endpoint is a combination of an IP address and a port number.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Streaming/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Streaming/</guid>
      <description>ds</description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Tools/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Tools/</guid>
      <description> A nice docker instroduction on slideshare https://www.slideshare.net/Docker/introduction-to-docker-2017 For all you need https://www.docker.com/  </description>
    </item>
    
    <item>
      <title></title>
      <link>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Web-Sockets/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://andreavitaletti.github.io/docs/Teaching/Reti-di-Calcolatori/Web-Sockets/</guid>
      <description>The HTML5 WebSockets specification defines an API that enables web pages to use the WebSockets protocol for two-way communication with a remote host.
WebSockets allow us to go beyond standard HTTP half-duplex communications, providing a number of benefits</description>
    </item>
    
  </channel>
</rss>